"""Malware analysis tab for the Cypher Security Toolkit."""
import os
import sys
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,
    QLineEdit, QTextEdit, QFileDialog, QComboBox, QFormLayout,
    QProgressBar, QTabWidget, QGroupBox, QCheckBox, QRadioButton,
    QSpinBox, QMessageBox, QSplitter
)
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QSize
from PyQt5.QtGui import QIcon, QFont
from src.tools.malware.hash_checker import MalwareHashChecker
from src.tools.malware.static_analyzer import StaticAnalyzer

class MalwareAnalysisWorker(QThread):
    """Background worker for malware analysis tasks."""
    finished = pyqtSignal(dict)
    progress = pyqtSignal(int)
    error = pyqtSignal(str)
    
    def __init__(self, task, file_path, api_key=None):
        """Initialize the worker.
        
        Args:
            task: Task to perform ('hash_check' or 'static_analysis')
            file_path: Path to the file to analyze
            api_key: VirusTotal API key (for hash checking)
        """
        super().__init__()
        self.task = task
        self.file_path = file_path
        self.api_key = api_key
    
    def run(self):
        """Run the analysis task."""
        try:
            self.progress.emit(10)
            
            if self.task == 'hash_check':
                checker = MalwareHashChecker(api_key=self.api_key)
                self.progress.emit(30)
                results = checker.check_file(self.file_path)
                self.progress.emit(90)
                self.finished.emit(results)
            
            elif self.task == 'static_analysis':
                analyzer = StaticAnalyzer()
                self.progress.emit(30)
                results = analyzer.analyze_file(self.file_path)
                self.progress.emit(90)
                self.finished.emit(results)
            
            self.progress.emit(100)
            
        except Exception as e:
            self.error.emit(str(e))


class MalwareTab(QWidget):
    """Malware analysis tab for the Cypher Security Toolkit."""
    
    def __init__(self, parent=None):
        """Initialize the malware analysis tab."""
        super().__init__(parent)
        self.init_ui()
    
    def init_ui(self):
        """Initialize the user interface."""
        main_layout = QVBoxLayout(self)
        
        # Create tab widget for different malware analysis tools
        tools_tabs = QTabWidget()
        tools_tabs.addTab(self.create_hash_checker_tab(), "Malware Hash Check")
        tools_tabs.addTab(self.create_static_analysis_tab(), "Static Analysis")
        
        main_layout.addWidget(tools_tabs)
    
    def create_hash_checker_tab(self):
        """Create the malware hash checker tab."""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        # File selection group
        file_group = QGroupBox("Select File")
        file_layout = QHBoxLayout()
        
        self.hash_file_path = QLineEdit()
        self.hash_file_path.setPlaceholderText("Path to file...")
        file_layout.addWidget(self.hash_file_path)
        
        browse_button = QPushButton("Browse")
        browse_button.clicked.connect(self.browse_hash_file)
        file_layout.addWidget(browse_button)
        
        file_group.setLayout(file_layout)
        layout.addWidget(file_group)
        
        # API key group
        api_group = QGroupBox("VirusTotal API Key (Optional)")
        api_layout = QHBoxLayout()
        
        self.api_key = QLineEdit()
        self.api_key.setPlaceholderText("Enter VirusTotal API key")
        self.api_key.setEchoMode(QLineEdit.Password)
        api_layout.addWidget(self.api_key)
        
        api_group.setLayout(api_layout)
        layout.addWidget(api_group)
        
        # Action buttons
        button_layout = QHBoxLayout()
        
        self.check_button = QPushButton("Check File")
        self.check_button.clicked.connect(self.check_file_hash)
        button_layout.addWidget(self.check_button)
        
        layout.addLayout(button_layout)
        
        # Progress bar
        self.hash_progress = QProgressBar()
        self.hash_progress.setRange(0, 100)
        self.hash_progress.setValue(0)
        layout.addWidget(self.hash_progress)
        
        # Results display
        results_group = QGroupBox("Results")
        results_layout = QVBoxLayout()
        
        self.hash_results = QTextEdit()
        self.hash_results.setReadOnly(True)
        results_layout.addWidget(self.hash_results)
        
        results_group.setLayout(results_layout)
        layout.addWidget(results_group)
        
        return tab
    
    def create_static_analysis_tab(self):
        """Create the static analysis tab."""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        # File selection group
        file_group = QGroupBox("Select File")
        file_layout = QHBoxLayout()
        
        self.analysis_file_path = QLineEdit()
        self.analysis_file_path.setPlaceholderText("Path to file...")
        file_layout.addWidget(self.analysis_file_path)
        
        browse_button = QPushButton("Browse")
        browse_button.clicked.connect(self.browse_analysis_file)
        file_layout.addWidget(browse_button)
        
        file_group.setLayout(file_layout)
        layout.addWidget(file_group)
        
        # Action buttons
        button_layout = QHBoxLayout()
        
        self.analyze_button = QPushButton("Analyze File")
        self.analyze_button.clicked.connect(self.analyze_file)
        button_layout.addWidget(self.analyze_button)
        
        layout.addLayout(button_layout)
        
        # Progress bar
        self.analysis_progress = QProgressBar()
        self.analysis_progress.setRange(0, 100)
        self.analysis_progress.setValue(0)
        layout.addWidget(self.analysis_progress)
        
        # Results display
        results_group = QGroupBox("Analysis Results")
        results_layout = QVBoxLayout()
        
        self.analysis_results = QTextEdit()
        self.analysis_results.setReadOnly(True)
        results_layout.addWidget(self.analysis_results)
        
        results_group.setLayout(results_layout)
        layout.addWidget(results_group)
        
        return tab
    
    def browse_hash_file(self):
        """Browse for file to hash check."""
        file_path, _ = QFileDialog.getOpenFileName(
            self, "Select File to Check", "", "All Files (*.*)"
        )
        if file_path:
            self.hash_file_path.setText(file_path)
    
    def browse_analysis_file(self):
        """Browse for file to analyze."""
        file_path, _ = QFileDialog.getOpenFileName(
            self, "Select File to Analyze", "", "All Files (*.*)"
        )
        if file_path:
            self.analysis_file_path.setText(file_path)
    
    def check_file_hash(self):
        """Check a file's hash against malware databases."""
        file_path = self.hash_file_path.text()
        
        if not file_path or not os.path.isfile(file_path):
            QMessageBox.warning(self, "Invalid File", "Please select a valid file.")
            return
        
        # Disable the button and clear results
        self.check_button.setEnabled(False)
        self.hash_results.clear()
        self.hash_progress.setValue(0)
        
        # Create a worker thread for the hash check
        self.hash_worker = MalwareAnalysisWorker(
            'hash_check', file_path, self.api_key.text()
        )
        self.hash_worker.finished.connect(self.display_hash_results)
        self.hash_worker.progress.connect(self.hash_progress.setValue)
        self.hash_worker.error.connect(self.handle_error)
        self.hash_worker.start()
    
    def analyze_file(self):
        """Perform static analysis on a file."""
        file_path = self.analysis_file_path.text()
        
        if not file_path or not os.path.isfile(file_path):
            QMessageBox.warning(self, "Invalid File", "Please select a valid file.")
            return
        
        # Disable the button and clear results
        self.analyze_button.setEnabled(False)
        self.analysis_results.clear()
        self.analysis_progress.setValue(0)
        
        # Create a worker thread for the analysis
        self.analysis_worker = MalwareAnalysisWorker(
            'static_analysis', file_path
        )
        self.analysis_worker.finished.connect(self.display_analysis_results)
        self.analysis_worker.progress.connect(self.analysis_progress.setValue)
        self.analysis_worker.error.connect(self.handle_error)
        self.analysis_worker.start()
    
    def display_hash_results(self, results):
        """Display hash check results."""
        checker = MalwareHashChecker()
        formatted_results = checker.format_results(results)
        self.hash_results.setText(formatted_results)
        self.check_button.setEnabled(True)
    
    def display_analysis_results(self, results):
        """Display static analysis results."""
        analyzer = StaticAnalyzer()
        formatted_results = analyzer.format_results(results)
        self.analysis_results.setText(formatted_results)
        self.analyze_button.setEnabled(True)
    
    def handle_error(self, error_msg):
        """Handle worker thread errors."""
        QMessageBox.critical(self, "Error", f"An error occurred: {error_msg}")
        self.check_button.setEnabled(True)
        self.analyze_button.setEnabled(True)