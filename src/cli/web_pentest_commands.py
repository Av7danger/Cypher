#!/usr/bin/env python3
import sys
from src.tools.web_pentest.http_header_analyzer import HTTPHeaderAnalyzer
from src.tools.web_pentest.subdomain_scanner import SubdomainScanner
from src.tools.web_pentest.xss_scanner import XSSScanner

def handle_web_pentest_commands(args):
    """Handle web penetration testing module commands."""
    if not args.command:
        print("Error: You must specify a web pentest command. Use 'webpentest --help' for more information.")
        sys.exit(1)
    
    # HTTP Header Analyzer
    if args.command == 'headers':
        analyzer = HTTPHeaderAnalyzer()
        
        print(f"Analyzing HTTP headers for {args.url}...")
        results = analyzer.analyze(args.url)
        
        if "error" in results:
            print(f"Error: {results['error']}")
            sys.exit(1)
        
        print(f"\nHTTP Header Analysis for {args.url}:")
        print("-" * 70)
        
        # Print headers
        print("Response Headers:")
        for name, value in results['headers'].items():
            print(f"  {name}: {value}")
        
        # Print security findings
        if 'security' in results:
            print("\nSecurity Analysis:")
            for finding in results['security']:
                severity_icon = "✓" if finding['status'] == 'good' else "⚠️" if finding['status'] == 'warning' else "✗"
                print(f"  {severity_icon} {finding['name']}: {finding['description']}")
        
        # Print recommendations
        if 'recommendations' in results:
            print("\nRecommendations:")
            for rec in results['recommendations']:
                print(f"  • {rec}")
    
    # Subdomain Scanner
    elif args.command == 'subdomains':
        scanner = SubdomainScanner()
        
        print(f"Scanning for subdomains of {args.domain}...")
        results = scanner.scan(args.domain)
        
        if "error" in results:
            print(f"Error: {results['error']}")
            sys.exit(1)
        
        print(f"\nSubdomains found for {args.domain}:")
        print("-" * 70)
        
        if not results['subdomains']:
            print("No subdomains found.")
        else:
            for i, subdomain in enumerate(sorted(results['subdomains']), 1):
                print(f"{i}. {subdomain}")
            
            print(f"\nTotal subdomains found: {len(results['subdomains'])}")
    
    # XSS Scanner
    elif args.command == 'xss':
        scanner = XSSScanner()
        
        print(f"Scanning {args.url} for XSS vulnerabilities...")
        results = scanner.scan(args.url)
        
        if "error" in results:
            print(f"Error: {results['error']}")
            sys.exit(1)
        
        print(f"\nXSS Vulnerability Scan Results for {args.url}:")
        print("-" * 70)
        
        if not results['vulnerabilities']:
            print("No XSS vulnerabilities found.")
        else:
            print("Potential XSS vulnerabilities:")
            for i, vuln in enumerate(results['vulnerabilities'], 1):
                print(f"\n{i}. {vuln['type']} vulnerability found:")
                print(f"   Location: {vuln['location']}")
                print(f"   Description: {vuln['description']}")
                if 'payload' in vuln:
                    print(f"   Payload: {vuln['payload']}")
                if 'severity' in vuln:
                    print(f"   Severity: {vuln['severity']}")
            
            print(f"\nTotal vulnerabilities found: {len(results['vulnerabilities'])}")
        
        if 'scan_info' in results:
            print("\nScan Information:")
            for key, value in results['scan_info'].items():
                print(f"  {key.replace('_', ' ').capitalize()}: {value}")
    
    else:
        print(f"Error: Unknown web pentest command '{args.command}'")
        sys.exit(1)