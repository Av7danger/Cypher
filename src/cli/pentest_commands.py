#!/usr/bin/env python3
import sys
from src.tools.pentest.sql_injection_scanner import SQLInjectionScanner

def handle_pentest_commands(args):
    """Handle advanced penetration testing module commands."""
    if not args.command:
        print("Error: You must specify a pentest command. Use 'pentest --help' for more information.")
        sys.exit(1)
    
    # SQL Injection Scanner
    if args.command == 'sqli':
        scanner = SQLInjectionScanner()
        
        print(f"Scanning {args.url} for SQL injection vulnerabilities...")
        results = scanner.scan(args.url)
        
        if "error" in results:
            print(f"Error: {results['error']}")
            sys.exit(1)
        
        print(f"\nSQL Injection Scan Results for {args.url}:")
        print("-" * 70)
        
        if not results['vulnerabilities']:
            print("No SQL injection vulnerabilities found.")
        else:
            print("Potential SQL injection vulnerabilities:")
            for i, vuln in enumerate(results['vulnerabilities'], 1):
                print(f"\n{i}. {vuln['type']} vulnerability found:")
                print(f"   Parameter: {vuln['parameter']}")
                print(f"   Description: {vuln['description']}")
                if 'payload' in vuln:
                    print(f"   Payload: {vuln['payload']}")
                if 'severity' in vuln:
                    print(f"   Severity: {vuln['severity']}")
            
            print(f"\nTotal vulnerabilities found: {len(results['vulnerabilities'])}")
        
        if 'scan_info' in results:
            print("\nScan Information:")
            for key, value in results['scan_info'].items():
                print(f"  {key.replace('_', ' ').capitalize()}: {value}")
    
    else:
        print(f"Error: Unknown pentest command '{args.command}'")
        sys.exit(1)