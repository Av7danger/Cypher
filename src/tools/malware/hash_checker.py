#!/usr/bin/env python3
"""Malware hash checker for the Cypher Security Toolkit."""
import os
import hashlib
import requests
import json
from typing import Dict, List, Optional, Union

class MalwareHashChecker:
    """Check file hashes against known malware databases."""
    
    def __init__(self, api_key: Optional[str] = None):
        """Initialize the malware hash checker.
        
        Args:
            api_key: VirusTotal API key (optional)
        """
        self.api_key = api_key or os.environ.get('VIRUSTOTAL_API_KEY', '')
        self.vt_url = 'https://www.virustotal.com/api/v3/files/'
    
    def calculate_hash(self, file_path: str) -> Dict[str, str]:
        """Calculate multiple hashes for a file.
        
        Args:
            file_path: Path to the file to hash
            
        Returns:
            Dict with MD5, SHA1, and SHA256 hashes
        """
        if not os.path.isfile(file_path):
            raise FileNotFoundError(f"File not found: {file_path}")
        
        md5 = hashlib.md5()
        sha1 = hashlib.sha1()
        sha256 = hashlib.sha256()
        
        with open(file_path, 'rb') as f:
            for chunk in iter(lambda: f.read(4096), b''):
                md5.update(chunk)
                sha1.update(chunk)
                sha256.update(chunk)
        
        return {
            'md5': md5.hexdigest(),
            'sha1': sha1.hexdigest(),
            'sha256': sha256.hexdigest()
        }
    
    def check_virustotal(self, file_hash: str) -> Dict:
        """Check a file hash against VirusTotal.
        
        Args:
            file_hash: SHA256, SHA1, or MD5 hash to check
            
        Returns:
            Dict with VirusTotal API response or error
        """
        if not self.api_key:
            return {'error': 'No VirusTotal API key provided'}
        
        headers = {'x-apikey': self.api_key}
        
        try:
            response = requests.get(f"{self.vt_url}{file_hash}", headers=headers)
            if response.status_code == 200:
                return response.json()
            elif response.status_code == 404:
                return {'result': 'File not found in VirusTotal database'}
            else:
                return {'error': f"API Error: {response.status_code}", 'details': response.text}
        except Exception as e:
            return {'error': f"Request failed: {str(e)}"}
    
    def check_file(self, file_path: str) -> Dict:
        """Check a file against malware databases.
        
        Args:
            file_path: Path to the file to check
            
        Returns:
            Dict with check results
        """
        try:
            hashes = self.calculate_hash(file_path)
            
            result = {
                'file_path': file_path,
                'hashes': hashes,
                'malware_check': {}
            }
            
            # Check with VirusTotal if API key is available
            if self.api_key:
                vt_result = self.check_virustotal(hashes['sha256'])
                result['malware_check']['virustotal'] = vt_result
            else:
                result['malware_check']['virustotal'] = {
                    'note': 'VirusTotal check skipped - no API key provided',
                    'get_api_key': 'https://www.virustotal.com/gui/join-us'
                }
            
            return result
        except Exception as e:
            return {'error': str(e)}
    
    def format_results(self, results: Dict) -> str:
        """Format check results as human-readable text.
        
        Args:
            results: Dict with check results
            
        Returns:
            Formatted string with results
        """
        output = []
        output.append("=== Malware Hash Check Results ===")
        
        if 'error' in results:
            output.append(f"Error: {results['error']}")
            return '\n'.join(output)
        
        output.append(f"File: {results['file_path']}")
        output.append("Hashes:")
        for hash_type, hash_value in results['hashes'].items():
            output.append(f"  {hash_type.upper()}: {hash_value}")
        
        output.append("\nMalware Database Results:")
        
        vt = results['malware_check'].get('virustotal', {})
        if 'note' in vt:
            output.append(f"VirusTotal: {vt['note']}")
        elif 'error' in vt:
            output.append(f"VirusTotal Error: {vt['error']}")
        elif 'result' in vt:
            output.append(f"VirusTotal: {vt['result']}")
        elif 'data' in vt:
            vt_data = vt['data']
            attrs = vt_data.get('attributes', {})
            stats = attrs.get('last_analysis_stats', {})
            
            if stats:
                detection_rate = f"{stats.get('malicious', 0)}/{sum(stats.values())}"
                output.append(f"VirusTotal Detection: {detection_rate} engines detected as malicious")
            
            if 'last_analysis_results' in attrs:
                output.append("\nTop detections:")
                detections = []
                for engine, result in attrs['last_analysis_results'].items():
                    if result.get('category') == 'malicious':
                        detections.append(f"  - {engine}: {result.get('result', 'unknown')}")
                
                for detection in sorted(detections)[:5]:  # Show top 5 detections
                    output.append(detection)
        
        return '\n'.join(output)


if __name__ == '__main__':
    # Simple test
    import sys
    
    if len(sys.argv) != 2:
        print(f"Usage: {sys.argv[0]} <file_path>")
        sys.exit(1)
    
    checker = MalwareHashChecker()
    results = checker.check_file(sys.argv[1])
    print(checker.format_results(results))